/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.conferencescheduling.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.optaplanner.examples.conferencescheduling.domain.Speaker;
import org.optaplanner.examples.conferencescheduling.domain.Talk;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "Talk type of timeslot"
    when
        Talk(timeslot != null, !getTalkType().equals(getTimeslot().getTalkType()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -100);
end

rule "Speaker unavailable timeslots"
    when
        Talk(hasAnyUnavailableSpeaker())
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Room conflict"
    when
        Talk(timeslot != null, $timeslot : timeslot,
                room != null, $room : room,
                $leftId : id)
        Talk(timeslot != null, timeslot.overlaps($timeslot),
                room == $room,
                id > $leftId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Speaker conflict"
    when
        $speaker : Speaker()
        Talk(hasSpeaker($speaker),
                timeslot != null, $timeslot : timeslot,
                $leftId : id)
        Talk(hasSpeaker($speaker),
                timeslot != null, timeslot.overlaps($timeslot),
                id > $leftId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Talk required timeslot tags"
    when
        Talk($count : missingRequiredTimeslotTagCount() > 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $count);
end

rule "Talk required room tags"
    when
        Talk($count : missingRequiredRoomTagCount() > 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $count);
end

rule "Speaker required timeslot tags"
    when
        Talk($count : missingSpeakerRequiredTimeslotTagCount() > 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $count);
end

rule "Speaker required room tags"
    when
        Talk($count : missingSpeakerRequiredRoomTagCount() > 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $count);
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "Talk preferred timeslot tags"
    when
        Talk($count : missingPreferredTimeslotTagCount() > 0)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $count);
end

rule "Talk preferred room tags"
    when
        Talk($count : missingPreferredRoomTagCount() > 0)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $count);
end

rule "Speaker preferred timeslot tags"
    when
        Talk($count : missingSpeakerPreferredTimeslotTagCount() > 0)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $count);
end

rule "Speaker preferred room tags"
    when
        Talk($count : missingSpeakerPreferredRoomTagCount() > 0)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $count);
end
