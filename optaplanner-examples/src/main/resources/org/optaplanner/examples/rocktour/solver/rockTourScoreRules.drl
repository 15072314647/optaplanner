/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.rocktour.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;

import org.optaplanner.examples.rocktour.domain.RockBus;
import org.optaplanner.examples.rocktour.domain.RockShow;
import org.optaplanner.examples.rocktour.domain.RockStandstill;
import org.optaplanner.examples.rocktour.domain.RockTourParametrization;

global HardSoftLongScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "Required show"
    when
        RockShow(required == true, date == null)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1000);
end

rule "Arrive before bus end date"
    when
        RockShow(bus != null, date == null)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "Distance from previous standstill"
    when
        RockShow(previousStandstill != null, $distanceFromPreviousStandstill : distanceFromPreviousStandstill)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $distanceFromPreviousStandstill);
end

rule "Distance to bus arrival location"
    when
        RockShow(nextShow == null, bus != null, $distanceToBusArrivalLocation : distanceToBusArrivalLocation)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $distanceToBusArrivalLocation);
end

rule "Visit all venues sooner than later"
    when
        RockShow(date != null, $daysAfterBusDeparture : daysAfterBusDeparture)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $daysAfterBusDeparture);
end
